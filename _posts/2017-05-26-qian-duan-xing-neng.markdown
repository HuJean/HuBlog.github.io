---
layout: post
title: 前端性能
date: '2017-05-26 00:42:09'
---

####基本概念
* 从用户角度而言，优化能够让页面加载得更快、对用户的操作响应得更及时，能够给用户提供更为友好的体验；
* 从服务商角度而言，优化能够减少页面请求数、或者减小请求所占带宽，能够节省可观的资源。
####优化途径
* 按粒度大致可以分为两类，第一类是页面级别的优化，例如 HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等；
* 第二类则是代码级别的优化，例如 Javascript中的DOM 操作优化、CSS选择符优化、图片优化以及 HTML结构优化等等。
* 减少 HTTP请求数：一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。
 * 页面简单，不需要过多的修饰；
 * 合理设置 HTTP缓存：被缓存资源的请求服务器是 304响应，只有 Header没有Body ，可以节省带宽
 * 资源合并与压缩：如果可以的话，尽可能的将外部的脚本、样式进行合并，多个合为一个。另外， CSS、 Javascript、Image 都可以用相应的工具进行压缩，压缩后往往能省下不少空间。
* 将外部脚本置底（将脚本内容在页面信息内容加载后再加载）
 * 外链脚本在加载时却会阻塞其他资源，例如在脚本加载完成之前，它后面的图片、样式以及其他脚本都处于阻塞状态，直到脚本加载完成后才会开始加载。
* 异步执行 inline脚本(其实原理和上面是一样，保证脚本在页面内容后面加载。)
* 将 CSS放在 HEAD中
 * 如果将 CSS放在其他地方比如 BODY中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕。
 * 除此之外，有些浏览器会在 CSS下载完成后才开始渲染页面，如果 CSS放在靠下的位置则会导致浏览器将渲染时间推迟。
* DOM 操作优化：DOM操作应该是脚本中最耗性能的一类操作，例如增加、修改、删除 DOM元素或者对 DOM集合进行操作。
 * 需要遍历 HTML Collection的时候，尽量将它转为数组后再访问，以提高性能。即使不转换为数组，也请尽可能少的访问它，例如在遍历的时候可以将 length属性、成员保存到局部变量后再使用局部变量。每次使用时都要重新执行查询得到结果；
 * Reflow & Repaint：不要一条一条地修改 DOM 的样式；
 * 慎用 with、避免使用 eval和 Function、减少作用域链、查找数据访问。
* CSS选择符
* HTML
* Image压缩

---
