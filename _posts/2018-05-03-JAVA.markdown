---
layout: post
title: JAVA基础
date: '2018-05-03 19:52:00'
categories: [计算机基础]
tags: [JAVA]
---

# 面向对象
  * 封装：隐藏内部变量和方法，向外部提供访问接口，提高代码的可用性和可维护性；
  * 继承：从基类继承变量和方法来创建子类，提高代码的重用性和可拓展性；
  * 多态：不同子类型的对象对同一消息做出不同的响应；
    * overload：方法重载，编译时多态，在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。
    * override：方法重写，运行时多态，子类重新定义父类的方法，必须有相同的方法名，参数列表和返回类型。
    * 继承+重写+向上转型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。

# 抽象类与接口
  * Abstract class：包含抽象方法的类，用来被继承
    * 包含抽象方法，也可以包含具体方法
    * 只要包含抽象方法就一定要被声明为抽象类
    * Abstract不能与final、private、static并列修饰一个类
    * 单继承，抽象方法由子类进行重写，不能实例化
  * Interface：完全抽象的类，没有提供任何具体实现
    * 所有方法自动被声明为public
    * 所有变量自动被声明为public static final
⎫   Implements接口的非抽象类必须实现接口的所有方法
⎫   不能被实例化，可同时实现多个接口
2.  Static与final
a)  Static
⎫   变量：全局变量，当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量；在类装载时，分配一块存储空间，所有此类的对象都可操作此块存储空间；
⎫   方法：ClassName.functionName，只能调用static方法和static变量；
⎫   类：只能修饰内部类；
⎫   代码块：JVM加载时，按照在类中出现的先后顺序依次执行。
b)  Final
⎫   变量：表示常量，不能被修改；可以先声明，在运行时初始化；
⎫   方法：不允许子类覆盖该方法；
⎫   类：不能被继承。
c)  static final：全局常量、全局方法。

