---
layout: post
title: 前端开发流程
date: '2017-05-28 07:00:00'
categories: [Front-end]
tags: [Develop]
---

# 开发流程
  * Front-end Integrated Solution（前端集成解决方案）
  * 规范与设计
  * 技术选型
    * 选择前端模块化框架（seajs, requirejs, ...）
    * 选择前端基础库（jquery, tangram, ...）
    * 选择模板语言（php, smarty, ...）
    * 选择模板插件（xss修复）
  * 自动化与拆分
    * 选择或开发自动化工具（打包，压缩，校验）
    * 将系统拆分为几个子系统，以便大团队并行开发
    * 适当调整框架以适应工具产出
  * 性能优化

# 前后端分离与协同
  * 一种是前端先写一个静态页面，写好后，让后端去套模板。静态页面可以本地开发，也无需考虑业务逻辑只需要实现View即可。不足是还需要后端套模板，这些前端代码后端需要浏览一遍，以免出错。
  * 另一种协作模式是，前端直接去写模板，这样做的问题在于，前端编写过程中很依赖与后端环境，如果当后端没写完的情况下，前端几乎没法干活。
  * 中间件，基于NodeJS的前后端分离

# 页面优化
  * 从用户角度而言，优化能够让页面加载得更快、对用户的操作响应得更及时，能够给用户提供更为友好的体验。
  * 从服务商角度而言，优化能够减少页面请求数、或者减小请求所占带宽，能够节省可观的资源。
  * 前端优化的途径有很多，按粒度大致可以分为两类，第一类是页面级别的优化，例如HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等;第二类则是代码级别的优化，例如Javascript中的DOM操作优化、CSS选择符优化、图片优化以及HTML结构优化等等。

# HTML语义化
  * 根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。

# AJAX
  * 通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加`<script>`标签来调用服务器提供的js脚本。

# 模块化
  * 解决命名冲突（YUI ）、文件依赖（Sea.js）
  * 数据模块的加载
  * 解析模块的层次依赖关系
  * 添加事件机制，优化管理代码

