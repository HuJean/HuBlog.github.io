---
layout: post
title: 由Regular引发的一些思考
date: '2019-03-14 17:00:00'
categories: [Front-end]
tags: [Framework]
---
Regular一直是公司内部通用的一个前端框架，平时在使用的过程中也做了一些源码阅读，在这边做一个整理。另外，也由此引发了一些对其他框架中数据绑定的认识吧。

# Regular
  * 双向数据绑定
    * UI层映射至Data层
      * input、textarea这一类可以有用户交互的元素才会涉及
      * 绑定onchange方法，监听用户输入，实时更新到Data
    * Data层映射到UI层
      * 监听者模式（事件）
        * 编译模板的过程中，为每个数据绑定一个watcher
        * 需要更新data时，手动调用update方法进入脏检查过程
        * 如果数据发生变化，则抛出更新事件（$update）
        * wacther捕获事件，执行回调队列中的所有方法
      * 脏检查
        * 递归过程，需要检查所有自组件的data是否发生变化
        * 至少需要两轮，设置了最多20轮的限制
      * get/set
        * 需要经常变动的数据，计算属性
        * Object.defineProperty，对数组变化劫持不到，可用Proxy进行优化

# React中的单向数据流
  * 没有UI层向数据层的映射，需手动绑定
  * 数据层到UI层
    * 数据变化，触发生存新的虚拟DOM
    * Diff算法，O(n)复杂度更新UI

# 基于Rxjs的数据管理
  * 观察者（发布/订阅）
    * Observable，数据流，订阅可获取值，一次性的获取
    * Subject继承自Observable，内部添加了Observers数组，每次更新会推送给订阅者
  * 数据管理
    * 解决原来Regular组件中数据自上而下，消息由内而外的传递过程
    * 全局数据管理，Observable为一些常量，各个组件订阅；Subject为一些异步数据，用MapDispatch（底层就是一个setData）改变，用MapState订阅数据（底层为一个subscirbe实现数据绑定）。