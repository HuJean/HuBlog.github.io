---
layout: post
title: 前端测试
date: '2018-04-21 08:52:00'
categories: [前端框架]
tags: [埋点]
---

# 数据采集
  * 优先在后端收集数据
  * 属性尽可能采集全面
  * 渠道转化，改善产品，用户运营，完整的用户画像，自助数据分析
  * 页面统计：各个页面的访问次数（PV）,访问设备数（UV）和访问时长，以及各页面之间的流向关系。
  * 事件统计：即记录用户的操作行为（如点击行为），记录用户操作行为中的具体细节。

# 前端埋点
  * 代码埋点
    * Google Analytics, Sensors Analytics, 友盟等。
    * 在APP或者界面初始化的时候，初始化第三方数据分析服务商的SDK，然后在某个事件发生时就调用SDK里面相应的数据发送接口发送数据。
    * 优点：使用者控制精准，可以非常精确地选择什么时候发送数据；同时使用者可以比较方便地设置自定义属性、自定义事件，传递比较丰富的数据到服务端。
    * 缺点：首先，埋点代价比较大，每一个控件的埋点都需要添加相应的代码，不仅工作量大，而且限定了必须是技术人员才能完成；其次是更新的代价比较大，每一次更新埋点方案，都必须改代码，然后通过各个应用市场进行分发，并且总会有相当多数量的用户不喜欢更新APP，这样埋点代码也就得不到更新了；最后，就是所有前端埋点方案都会面临的数据传输时效性和可靠性的问题了，这个问题就只能通过在后端收集数据来解决了。
  * 可视化埋点
    * Mixpanel(移动端), TalkingData, 诸葛IO, Sensors Analytics等。
    * 既然每次埋点更新都需要等待APP的更新，那么，就参考现在很多手游的做法，把核心代码和配置、资源分开，在APP启动的时候通过网络更新配置和资源即可。
  * 无痕埋点
    * Heap, GrowingIO, 百度等。
    * 和可视化埋点很像。而从实际的实现上看，二者的区别就是可视化埋点先通过界面配置哪些控件的操作数据需要收集；“无埋点”则是先尽可能收集所有的控件的操作数据，然后再通过界面配置哪些数据需要在系统里面进行分析。
    * 一方面是解决了数据“回溯”的问题，例如，在某一天，突然想增加某个控件的点击的分析，如果是可视化埋点方案，则只能从这一时刻向后收集数据，而如果是“无埋点”，则从部署 SDK 的时候数据就一直都在收集了；另一方面，“无埋点”方案也可以自动获取很多启发性的信息，例如，“无埋点”可以告诉使用者这个界面上每个控件分别被点击的概率是多大，哪些控件值得做更进一步的分析等等。
    * 与可视化埋点一样，“无埋点”依然没有解决覆盖的功能优先，不能灵活地自定义属性，传输时效性和数据可靠性欠佳这几个缺点。甚至由于所有的控件事件都全部搜集，反而会给服务器和网络传输带来更大的负载。