---
layout: post
title: HTML基础
date: '2017-05-21 07:00:00'
categories: [HTML]
tags: [Html]
---

# Doctype
  * 标准模式与兼容模式各有什么区别? 
    * <!DOCTYPE>声明位于位于HTML文档中的第一行，处于<html>标签之前，告知浏览器的解析器用什么文档标准解析这个文档。
    * DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。

  * HTML5 为什么只需要写 <!DOCTYPE HTML>?
    * HTML5 不基于标准通用标记语言SGML(Standard Generalized Markup language)，因此不需要对DTD(Document Type Definition)进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；
    * 而HTML4.01基于SGML，所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。

---
# 标签元素	
  * 行内元素有哪些？块级元素有哪些？空(void)元素有那些？
    * CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为`block`，则为块级元素；span默认display属性值为`inline`，是行内元素。
    * 行内元素有：`a` `b` `span` `img` `input` `select` `strong`
    * 块级元素有：`div` `ul` `ol` `li` `dl` `dt` `dd` `h1` `h2` `h3` `h4`
    * 常见的空元素：`br` `hr` `img` `input` `link` `meta`
    * 鲜为人知的是：`area` `base` `col` `command` `embed` `keygen` `param` `source` `track` `wbr`

---
# 页面导入样式时，使用link和@import有什么区别？
  * link属于XHTML标签，除了加载CSS外，还能用于定义RSS，定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS；
  * 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载；
  * import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题。

---
# 浏览器内核
  * 主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。
  * 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。
  * JS引擎则：解析和执行javascript来实现网页的动态效果。最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。
  * 常见的浏览器内核有哪些？
    * Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]；
    * Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等；
    * Presto内核：Opera7及以上。[Opera内核原为：Presto，现为：Blink;]；
    * Webkit内核：Safari,Chrome等。 [ Chrome的：Blink（WebKit的分支）]

---
# HTML5新特性

   ![](/assets/images/2017/h1.jpg)

  * 用webWorker来处理一些比较耗时的计算
    * postMessage(data): 子线程与主线程之间互相通信使用方法，传递的data为任意值。
    * terminate()：主线程中终止worker，此后无法再利用其进行消息传递。

---

# HTML5的离线储存
  * 在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。
  * 原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。
  * 如何使用
    * 页面头部像下面一样加入一个manifest的属性；
    * 在cache.manifest文件的编写离线存储的资源；
    * 在离线状态时，操作window.applicationCache进行需求实现。

  * CACHE MANIFEST
~~~~~~~~
v0.11
CACHE:
  js/app.js
  css/style.css
NETWORK:
  resourse/logo.png
FALLBACK:
  //offline.html
~~~~~~~~

# 浏览器对HTML5的离线储存资源进行管理和加载
  * 在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件。
  * 如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。
  * 如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。离线的情况下，浏览器就直接使用离线存储的资源。

---
# cookies、sessionStorage 和 localStorage 
  * cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密），cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
  * 存储大小：cookie数据大小不能超过4k。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
  * 有期时间：localStorage：存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage：数据在当前浏览器窗口关闭后自动删除。Cookie：设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。

---
# Iframe
  * window 的 onload 事件需要在所有 iframe 加载完毕后(包含里面的元素)才会触发。iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。
  * 搜索引擎的检索程序无法解读这种页面，不利于SEO(Search Engine Optimization);
  * 如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。

----
# Label
  * Label标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。
  * `<label for="Name">Number:</label>`
  * `<input type=“text“name="Name" id="Name"/>`
  * `<label>Date:<input type="text" name="B"/></label>`

# HTML5的form关闭自动完成功能
  * 给不想要提示的 form 或某个 input 设置为 `autocomplete=off`。

---
# 浏览器内多个标签页之间的通信
  * WebSocket、SharedWorker；
  * 可以调用localstorge、cookies等本地存储方式；
  * localstorge另一个浏览上下文里被添加、修改或删除时，它会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信；
    
    ![](/assets/images/2017/h2.jpg)
    
    ![](/assets/images/2017/h3.jpg)
 
  * webSocket：ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你 ）
  * 如何兼容低浏览器？(阿里) Adobe Flash Socket 、ActiveX HTMLFile (IE) 、基于 multipart 编码发送 XHR 、基于长轮询的 XHR

---
# 页面可见性（Page Visibility API） 
  * 通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；
    
    ![](/assets/images/2017/h4.jpg)

---
# 在页面上实现一个圆形的可点击区域
  * map+area或者svg；
  * border-radius；
  * 纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等

    ![](/assets/images/2017/h5.jpg)

    ![](/assets/images/2017/h6.jpg)
 
    ![](/assets/images/2017/h7.jpg)

   
# 画线
  * 实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。
  * `<div style="height:1px;overflow:hidden;background:red"></div>`

# 网页验证码
  * 区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；
  * 有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。


# title与h1、b与strong、i与em的区别
  * `title`属性没有明确意义只表示是个标题，`H1`则表示层次明确的标题，对页面信息的抓取也有很大的影响；
  * `strong`是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：`<strong>`会重读，而`<B>`是展示强调内容。
  * `i`内容展示为斜体，`em`表示强调的文本；
  * Physical Style Elements，自然样式标签b, i, u, s, pre；
  * Semantic Style Elements，语义样式标签strong, em, ins, del, code；
  * 应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。

---
# canvas与svg
  * canvas：元素本身并没有绘制能力（它仅仅是图形的容器），必须使用脚本来完成实际的绘图任务。Canvas提供的功能更原始，适合像素处理，动态渲染和大数据量绘制。
  * SVG可缩放矢量图形（Scalable Vector Graphics）：基于可扩展标记语言（XML），使用XML文档描述来绘图。SVG功能更完善，适合静态图片展示，高保真文档查看和打印的应用场景。
 ![](/assets/images/2017/h8.jpg)

---
# 缓存清除
  * 如何处理缓存，如何清除缓存：浏览器的缓存，有的时候我们需要它来提高网站性能和浏览器速度；但有的时候我们又不得不清除缓存，因为缓存中可能包含一些错误的数据，因此，缓存比较适用于较少更新的网站。

  * meta方法
    
    ![](/assets/images/2017/h9.jpg)

  * 清理form表单的临时缓存：`<body onLoad="javascript:document.yourFormName.reset()">`
  * jquery ajax清除浏览器缓存
  * 用ajax请求服务器最新文件，并加上请求头`If-Modified-Since`和`Cache-Control`

    ![](/assets/images/2017/h10.jpg)![](/assets/images/2017/h11.jpg)
 
  * 直接用cache:false
  * 用随机数：URL 参数后加上 `"?ran=" + Math.random()`;
  * 用php后端清理：在服务端加 `header("Cache-Control: no-cache, must-revalidate")`

