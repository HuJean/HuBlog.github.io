---
layout: post
title: JS基础之AJAX
date: '2017-05-20 07:00:00'
categories: [JS]
tags: [AJAX]
---

# 基本概念
  * AJAX：异步 JavaScript 和 XML，创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。
  
    ![The IE Box]({{site.url}}/assets/images/2017/ja1.jpg)

---
# XMLHttpRequest 对象
 * 用于在后台与服务器交换数据

    ![The IE Box]({{site.url}}/assets/images/2017/ja3.jpg)

---
# 三个常用的属性
  * Onreadystatechange：存有处理服务器响应的函数
  * readyState：存有服务器响应的状态信息，每当 readyState 改变时，onreadystatechange函数就会被执行。
  * responseText：取回由服务器返回的数据。
    
    ![The IE Box]({{site.url}}/assets/images/2017/ja4.jpg)

# 方法
  * open：规定请求的类型、URL 以及是否异步处理请求
  * send：post方式 需要发送数据

---
# AJAX状态值
  * 运行AJAX所经历过的几种状态，无论访问是否成功都将响应的步骤，可以理解成为AJAX运行步骤。如：正在发送，正在响应等，由AJAX对象与服务器交互时所得；使用“ajax.readyState”获得。（由数字1~4单位数字组成）
    
    ![The IE Box]({{site.url}}/assets/images/2017/ja5.jpg)

# AJAX状态码说明
  * AJAX状态码是指，无论AJAX访问是否成功，由HTTP协议根据所提交的信息，服务器所返回的HTTP头信息代码，该信息使用“ajax.status”所获得；（由数字1XX,2XX三位数字组成，详细查看RFC）

    * `1**`：请求收到，继续处理
    * `2**`：操作成功收到，分析、接受
    * `3**`：完成此请求必须进一步处理
    * `4**`：请求包含一个错误语法或不能完成
    * `5**`：服务器执行一个完全有效请求失败

---
# 优缺点
  * 使用异步方式与服务器通信，页面不需要重新加载，页面无刷新；按需取数据，减少服务器的负担；使得Web应用程序更为迅捷地响应用户交互；浏览器的内容和服务端代码进行分离。页面的内容全部由JAVAScript来控制，服务端负责逻辑的校验和从数据库中拿数据。
  * 将服务端的方法暴露出来，黑客可利用这一点进行攻击；大量JS代码，容易出错；Ajax的无刷新重载，由于页面的变化没有刷新重载那么明显，所以容易给用户带来困扰——用户不太清楚现在的数据是新的还是已经更新过的；可能破坏浏览器后退按钮的正常行为；一些手持设备（如手机、PAD等）自带的浏览器现在还不能很好的支持Ajax。

# 跨域请求
  * 同一个ip、同一个网络协议、同一个端口，三者都满足就是同一个域，否则就是跨域问题了。说白点就是post、get的url不是你当前的网站，域名不同。

  * 同源策略
  * 跨域资源共享
  * 解决方案
    * CORS 跨源资源共享：`Cross-Origin Resource Sharing`（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，是 JSONP 模式的现代版。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比 JSONP 要来的好。另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。现代的浏览器都支持 CORS。
    * JSONP：JSONP 是 JSON 的一种使用模式，可以解决主流浏览器的跨域数据访问问题。其原理是根据 `XmlHttpRequest` 对象受到同源策略的影响，而 `<script>` 标签元素却不受同源策略影响，可以加载跨域服务器上的脚本，网页可以从其他来源动态产生 JSON 资料。用 JSONP 获取的不是 JSON 数据，而是可以直接运行的 JavaScript 语句。
    * 代理


