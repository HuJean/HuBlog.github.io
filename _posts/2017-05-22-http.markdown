---
layout: post
title: HTTP基础
date: '2017-05-22 07:00:00'
categories: [网络]
tags: [HTTP]
---

# URL与URI的区别。
  * uniform resource location 统一资源定位符
  * uniform resource identifier 统一资源标识符

# 请求报文
  
    ![2]({{site.url}}/assets/images/2017/HTTP1.jpg)

# 响应报文
   
    ![2]({{site.url}}/assets/images/2017/HTTP2.jpg)

---
# GET与POST的区别。
  * 使用目标：POST与GET都用于获取信息，但是GET方式仅仅是查询，并不对服务器上的内容产生任何作用结果；每次GET的内容都是相同的。POST则常用于发送一定的内容进行某些修改操作。
  * 大小限制：由于不同的浏览器对URL的长度大小有一定的字符限制，因此由于GET方式放在URL的首部中，自然也跟着首先，但是具体的大小要依浏览器而定。POST方式则是把内容放在报文内容中，因此只要报文的内容没有限制，它的大小就没有限制。
  * 安全性：上面也说了GET是直接添加到URL后面的，直接就可以在URL中看到内容。而POST是放在报文内部的，用户无法直接看到。
  * GET用于获取某个内容，POST用于提交某种数据请求。按照使用场景来说，一般用户注册的内容属于私密的，这应该使用POST方式；而针对某一内容的查询，为了快速的响应，可以使用GET方式。

---
# Cookie
  * Cookie是一种由服务器端确定，并保存在客户端浏览器中的内容。这样，就不需要每次都添加用户的相关信息，请求会自动添加cookie中对应的内容。

    ![]({{site.url}}/assets/images/2017/HTTP3.jpg)![]({{site.url}}/assets/images/2017/HTTP4.jpg)
  
# 持久化
  * 如果每次想要发送http报文都需要经过这个过程，那么时间大部分都会消耗在建立和断开连接的过程中。因此http中使用了connection属性，用于指定连接的方式。　当设置成keep-alive，如上面所示的百度的http头部信息所示，就会建立一条持久化的连接。不需要每次都建立连接，再中断。

    ![]({{site.url}}/assets/images/2017/HTTP5.jpg)![]({{site.url}}/assets/images/2017/HTTP6.jpg)

# 管道化
  * 如果一个http请求，请求了大量的图片等大文件，那么其他的http请求怎么办呢？http可以一次发送多个http请求，然后等待响应连接。不需要排队等候，这样就加快了http的响应时间。

# 内容编码
  * 由于某些报文的内容过大，因此在传输时，为了减少传输的时间，会采取一些压缩的措施。如上面的报文信息中，Accept-Encoding就定义了内容编码的格式：gzip

---
# 其他传输方式
  * PUT：传输文件，在请求报文的主体中包含文件内容，然后保存到请求URL指定的位置，有安全问题；
  * HEAD：获得报文首部，不返回报文主体部分，用于确认URI的有效性及资源更新的日期时间等；
  * DELETE：删除文件，DELETE是与PUT相反的方法，是按请求URI删除指定的资源
  * OPYIONS：询问支持的方法，用来查询针对请求URI指定的资源支持的方法
  * TRACE：追踪路径，让web服务器端将之前的请求通信还回给客户端的方法，发送请求时，在Max-Frowards首部字段中填入数值，每经过一个服务器端就-1，当数值为0时，停止传输，最后收到服务器返回状态码200 OK的响应
  * CONNECT：要求采用隧道协议连接代理，该方法要求在于代理服务器通信时建立隧道，实现用隧道协议进行TCP通信，主要使用SSL（安全套接层）和TLS（传输层安全）协议把通信内容加密后经过网络传输。
